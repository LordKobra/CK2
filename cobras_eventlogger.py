MIT License

Copyright (c) 2021 SirCobra

Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the 
"Software"), to deal in the Software without restriction, including 
without limitation the rights to use, copy, modify, merge, publish, 
distribute, sublicense, and/or sell copies of the Software, and to 
permit persons to whom the Software is furnished to do so, subject to 
the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import sys
import os
import time


def edit_debug(file, mode):
    file_suffix = file.split('\\')[-1]
    file_content = ""
    # eventparameter
    event_id = ""
    immediate_exists = False
    # decisionparameter
    decision_id = ""
    clause_level = 0
    with open(file, 'r+') as f:
        for line_1 in f:
            line = line_1.lstrip()
            # remove all previously autogenerated stuff
            if line.endswith("#$autogen\n"):
                continue
            # ignore comments
            if line.startswith('#'):
                file_content += line_1
                continue
            # update event_id
            if line.startswith("id ="):
                file_content += line_1
                event_id = line.split()[2].split('#')[0]
                # new event needs new immediate
                immediate_exists = False
                continue
            # update decision_id
            if clause_level == 1 and line != "":
                decision_id = line.split()[0]
            # update clause level
            clause_level += line.count('{')
            clause_level -= line.count('}')
            # add new log
            # 1 - add events
            if mode == '1':
                if line.startswith("immediate =") and (clause_level == 1 + line.count('{') - line.count('}')):  # only affect immediate clauses in the main clause
                    # only 1 line for the entire clause
                    if line.endswith('}\n'):
                        file_content += "\timmediate = {\n"
                        file_content += "\t\tlog = \"Event: %s fired. File: %s\"\t#$autogen\n" % (event_id, file_suffix)
                        line_cripple = line[14:-3]
                        file_content += "\t\t%s\n" % (line_cripple)
                        file_content += "\t}\n"
                    # more lines come
                    else:
                        file_content += line_1
                        file_content += "\t\tlog = \"Event: %s fired. File: %s\"\t#$autogen\n" % (event_id, file_suffix)
                    immediate_exists = True
                    continue
                # there was no immediate clause existing
                if line.startswith("option =") and immediate_exists is False:
                    file_content += "\timmediate = {\t#$autogen\n"
                    file_content += "\t\tlog = \"Event: %s fired. File: %s\"\t#$autogen\n" % (event_id, file_suffix)
                    file_content += "\t}\t#$autogen\n"
                    file_content += line_1
                    immediate_exists = True
                    continue
            # 4 - add decisions
            if mode == '4':
                if line.startswith("effect ="):
                    if line.endswith("}\n"):
                        file_content += "\t\teffect = {\n"
                        file_content += "\t\t\tlog = \"Decision %s fired. File: %s\"\t#$autogen\n" % (decision_id, file_suffix)
                        line_cripple = line[11:-3]
                        file_content += "\t\t\t%s\n" % (line_cripple)
                        file_content += "\t\t}\n"
                    else:
                        file_content += line_1
                        file_content += "\t\t\tlog = \"Decision %s fired. File: %s\"\t#$autogen\n" % (decision_id, file_suffix)
                    continue

            # else
            file_content += line_1
        f.seek(0)
        f.write(file_content)
        f.truncate()
    return


if __name__ == '__main__':
    # ask the user for the task
    print("Debug Info Editor by SirCobra")
    print("Version 2.2")
    print("Made for the 'Warhammer: Geheimnisnacht'-Team")
    print("Special Thanks to ManuSwaG for Testing\n")
    if not input("Are you sure you want to edit the debug information? (y/n): ") == "y":
        sys.exit(1)
    while(True):
        print("1: Add Event Debug Info")
        print("4: Add Decision Debug Info")
        print("7: Remove Debug Info")
        print("0: Exit Program")
        mode = input("Enter the mode number:")
        if not (mode == '1' or mode == '4' or mode == '7'):
            print("Program is terminated...")
            break
        # log the time
        t1_start = time.time()
        # list all files and edit them
        cwd_1 = os.getcwd()
        if mode == "1" or mode == "7":
            # folder does not exist
            if not os.path.isdir("./events"):
                if mode == "1":
                    print("Can't add event debug info, because folder 'events' does not exist!")
                if mode == "7":
                    print("Can't remove event debug info, because folder 'events' does not exist!")
            else:
                if mode == "1":
                    print("Adding event debug info...")
                if mode == "7":
                    print("Removing event debug info...")
                cwd = os.path.join(cwd_1, "events")
                for eventfile in os.listdir(cwd):
                    file_path = os.path.join(cwd, eventfile)
                    try:
                        if os.path.isfile(file_path) and eventfile.endswith('.txt'):
                            edit_debug(file_path, mode)
                    except Exception as e:
                        print('Could not edit %s, because %s' % (file_path, e))
        if mode == "4" or mode == "7":
            if not os.path.isdir("./decisions"):
                if mode == "4":
                    print("Can't add decision debug info, because folder 'decisions' does not exist!")
                if mode == "7":
                    print("Can't remove decision debug info, because folder 'decisions' does not exist!")
            else:
                if mode == "4":
                    print("Adding decision debug info...")
                if mode == "7":
                    print("Removing decision debug info...")
                cwd = os.path.join(cwd_1, "decisions")
                for eventfile in os.listdir(cwd):
                    file_path = os.path.join(cwd, eventfile)
                    try:
                        if os.path.isfile(file_path) and eventfile.endswith('.txt'):
                            edit_debug(file_path, mode)
                    except Exception as e:
                        print('Could not edit %s, because %s' % (file_path, e))
        print('Done!')
        t1_stop = time.time()
        print("Total time in seconds: ", t1_stop-t1_start)
        print("\nDo you want to perform another task?")
    time.sleep(1)


